licenses(["notice"])  # MIT license

load(
    "@rules_capnproto//third_party/capnproto:cc_defs.bzl",
    "capnroto_cc_binary",
    "capnroto_cc_library",
    "capnroto_cc_test",
)
load("@rules_capnproto//capnp:capnp_library.bzl", "capnp_capnp_library", "capnp_library")
load("@rules_capnproto//capnp:cc_capnp_library.bzl", "cc_capnp_library")

# --------------------------------------------------------------------------------------------------
# capnp
# --------------------------------------------------------------------------------------------------

CAPNP_LITE_SRCS = [
    "c++/src/capnp/any.c++",
    "c++/src/capnp/arena.c++",
    "c++/src/capnp/blob.c++",
    "c++/src/capnp/c++.capnp.c++",
    "c++/src/capnp/layout.c++",
    "c++/src/capnp/list.c++",
    "c++/src/capnp/message.c++",
    "c++/src/capnp/schema.capnp.c++",
    "c++/src/capnp/serialize-packed.c++",
    "c++/src/capnp/serialize.c++",
    "c++/src/capnp/stream.capnp.c++",
]

CAPNP_HEAVY_SRCS = [
    "c++/src/capnp/capability.c++",
    "c++/src/capnp/dynamic-capability.c++",
    "c++/src/capnp/dynamic.c++",
    "c++/src/capnp/schema-loader.c++",
    "c++/src/capnp/schema.c++",
    "c++/src/capnp/stringify.c++",
]

CAPNP_LITE_HDRS = [
    "c++/src/capnp/any.h",
    "c++/src/capnp/arena.h",
    "c++/src/capnp/blob.h",
    "c++/src/capnp/c++.capnp.h",
    "c++/src/capnp/common.h",
    "c++/src/capnp/compat/std-iterator.h",
    "c++/src/capnp/endian.h",
    "c++/src/capnp/generated-header-support.h",
    "c++/src/capnp/layout.h",
    "c++/src/capnp/list.h",
    "c++/src/capnp/membrane.h",
    "c++/src/capnp/message.h",
    "c++/src/capnp/orphan.h",
    "c++/src/capnp/pointer-helpers.h",
    "c++/src/capnp/pretty-print.h",
    "c++/src/capnp/raw-schema.h",
    "c++/src/capnp/schema-lite.h",
    "c++/src/capnp/schema.capnp.h",
    "c++/src/capnp/serialize-packed.h",
    "c++/src/capnp/serialize.h",
    "c++/src/capnp/stream.capnp.h",
]

CAPNP_HEAVY_HDRS = [
    "c++/src/capnp/capability.h",
    "c++/src/capnp/dynamic.h",
    "c++/src/capnp/schema-loader.h",
    "c++/src/capnp/schema.h",
]

CAPNP_LITE_TEST_SRCS = [
    "c++/src/capnp/any-test.c++",
    "c++/src/capnp/blob-test.c++",
    "c++/src/capnp/canonicalize-test.c++",
    "c++/src/capnp/common-test.c++",
    "c++/src/capnp/encoding-test.c++",
    "c++/src/capnp/endian-fallback-test.c++",
    "c++/src/capnp/endian-test.c++",
    "c++/src/capnp/fuzz-test.c++",
    "c++/src/capnp/layout-test.c++",
    "c++/src/capnp/message-test.c++",
    "c++/src/capnp/orphan-test.c++",
    "c++/src/capnp/serialize-packed-test.c++",
    "c++/src/capnp/serialize-test.c++",
]

CAPNP_HEAVY_TEST_SRCS = [
    "c++/src/capnp/capability-test.c++",
    "c++/src/capnp/dynamic-test.c++",
    "c++/src/capnp/endian-reverse-test.c++",
    "c++/src/capnp/schema-loader-test.c++",
    "c++/src/capnp/schema-test.c++",
    "c++/src/capnp/stringify-test.c++",
]

capnroto_cc_library(
    name = "capnp",
    srcs = CAPNP_LITE_SRCS + CAPNP_HEAVY_SRCS,
    hdrs = CAPNP_LITE_HDRS + CAPNP_HEAVY_HDRS,
    visibility = ["//visibility:public"],
    deps = [
        ":kj",
        ":kj_async",
    ],
)

capnroto_cc_test(
    name = "capnp_heavy_tests",
    size = "small",
    srcs = CAPNP_HEAVY_TEST_SRCS,
    deps = [
        ":capnp",
        ":capnp_test_util",
        ":kj_test",
    ],
)

capnroto_cc_library(
    name = "capnp_lite",
    srcs = CAPNP_LITE_SRCS,
    hdrs = CAPNP_LITE_HDRS,
    defines = ["CAPNP_LITE"],
    visibility = ["//visibility:public"],
    deps = [":kj"],
)

# NOTE: This is a separate library just so that we can add the textual_hdrs. Some of the c++ files
# are #included in other c++ files, so this is the typical bazel work-around to support that.
capnroto_cc_library(
    name = "capnp_lite_tests_lib",
    srcs = CAPNP_LITE_TEST_SRCS,
    textual_hdrs = ["c++/src/capnp/endian-test.c++"],
    deps = [
        ":capnp_lite",
        ":capnp_test_cc_capnp",
        ":capnp_test_util",
        ":kj_test",
    ],
)

capnroto_cc_test(
    name = "capnp_lite_tests",
    deps = ["capnp_lite_tests_lib"],
)

capnp_capnp_library(
    name = "capnp_capnp",
    srcs = [
        "c++/src/capnp/c++.capnp",
        "c++/src/capnp/schema.capnp",
        "c++/src/capnp/stream.capnp",
    ],
    includes = ["c++/src"],
    visibility = ["//visibility:public"],
)

cc_capnp_library(
    name = "capnp_cc_capnp",
    visibility = ["//visibility:public"],
    deps = [":capnp_capnp"],
)

capnroto_cc_library(
    name = "capnp_rpc",
    srcs = [
        "c++/src/capnp/ez-rpc.c++",
        "c++/src/capnp/membrane.c++",
        "c++/src/capnp/persistent.capnp.c++",
        "c++/src/capnp/rpc.c++",
        "c++/src/capnp/rpc.capnp.c++",
        "c++/src/capnp/rpc-twoparty.c++",
        "c++/src/capnp/rpc-twoparty.capnp.c++",
        "c++/src/capnp/serialize-async.c++",
    ],
    hdrs = [
        "c++/src/capnp/ez-rpc.h",
        "c++/src/capnp/persistent.capnp.h",
        "c++/src/capnp/rpc.capnp.h",
        "c++/src/capnp/rpc.h",
        "c++/src/capnp/rpc-prelude.h",
        "c++/src/capnp/rpc-twoparty.capnp.h",
        "c++/src/capnp/rpc-twoparty.h",
        "c++/src/capnp/serialize-async.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":capnp",
        ":kj",
        ":kj_async",
    ],
)

capnp_library(
    name = "capnp_rpc_capnp",
    srcs = [
        "c++/src/capnp/persistent.capnp",
        "c++/src/capnp/rpc.capnp",
        "c++/src/capnp/rpc-twoparty.capnp",
    ],
    includes = ["c++/src"],
    visibility = ["//visibility:public"],
)

cc_capnp_library(
    name = "capnp_rpc_cc_capnp",
    visibility = ["//visibility:public"],
    deps = [":capnp_rpc_capnp"],
)

capnroto_cc_test(
    name = "capnp_rpc_tests",
    srcs = [
        "c++/src/capnp/ez-rpc-test.c++",
        "c++/src/capnp/membrane-test.c++",
        "c++/src/capnp/rpc-test.c++",
        "c++/src/capnp/rpc-twoparty-test.c++",
        "c++/src/capnp/serialize-async-test.c++",
    ],
    deps = [
        ":capnp_rpc",
        ":capnp_test_util",
        ":kj_test",
    ],
)

capnroto_cc_library(
    name = "capnp_json",
    srcs = [
        "c++/src/capnp/compat/json.c++",
        "c++/src/capnp/compat/json.capnp.c++",
    ],
    hdrs = [
        "c++/src/capnp/compat/json.capnp.h",
        "c++/src/capnp/compat/json.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":capnp",
        ":kj",
        ":kj_async",
    ],
)

capnp_library(
    name = "capnp_json_capnp",
    srcs = ["c++/src/capnp/compat/json.capnp"],
    includes = ["c++/src"],
    visibility = ["//visibility:public"],
)

cc_capnp_library(
    name = "capnp_json_cc_capnp",
    visibility = ["//visibility:public"],
    deps = [":capnp_json_capnp"],
)

capnp_library(
    name = "capnp_json_test_capnp",
    srcs = ["c++/src/capnp/compat/json-test.capnp"],
    includes = ["c++/src"],
    visibility = ["//visibility:public"],
    deps = [":capnp_json_capnp"],
)

cc_capnp_library(
    name = "capnp_json_test_cc_capnp",
    visibility = ["//visibility:public"],
    deps = [":capnp_json_test_capnp"],
)

capnroto_cc_test(
    name = "capnp_json_tests",
    srcs = ["c++/src/capnp/compat/json-test.c++"],
    deps = [
        ":capnp_json",
        ":capnp_json_test_cc_capnp",
        ":capnp_test_util",
        ":kj",
        ":kj_test",
    ],
)

capnroto_cc_library(
    name = "capnp_websocket",
    srcs = ["c++/src/capnp/compat/websocket-rpc.c++"],
    hdrs = ["c++/src/capnp/compat/websocket-rpc.h"],
    deps = [
        ":capnp",
        ":capnp_rpc",
        ":kj",
        ":kj_async",
        ":kj_http",
    ],
)

capnroto_cc_test(
    name = "capnp_websocket_tests",
    srcs = ["c++/src/capnp/compat/websocket-rpc-test.c++"],
    deps = [
        ":capnp_test_util",
        ":capnp_websocket",
        ":kj",
        ":kj_test",
    ],
)

capnp_library(
    name = "capnp_test_capnp",
    srcs = [
        "c++/src/capnp/test.capnp",
        "c++/src/capnp/test-import.capnp",
        "c++/src/capnp/test-import2.capnp",
    ],
    embed_files = [
        "c++/src/capnp/testdata/packed",
        "c++/src/capnp/testdata/short.txt",
        "c++/src/capnp/testdata/binary",
    ],
    includes = ["c++/src"],
    visibility = ["//visibility:public"],
)

cc_capnp_library(
    name = "capnp_test_cc_capnp",
    visibility = ["//visibility:public"],
    deps = [":capnp_test_capnp"],
)

capnroto_cc_library(
    name = "capnp_test_util",
    srcs = ["c++/src/capnp/test-util.c++"],
    hdrs = ["c++/src/capnp/test-util.h"],
    deps = [
        ":capnp_test_cc_capnp",
        ":kj",
        ":kj_test",
    ],
)

# --------------------------------------------------------------------------------------------------
# capnpc
# --------------------------------------------------------------------------------------------------

capnroto_cc_library(
    name = "capnpc",
    srcs = [
        "c++/src/capnp/compiler/compiler.c++",
        "c++/src/capnp/compiler/error-reporter.c++",
        "c++/src/capnp/compiler/generics.c++",
        "c++/src/capnp/compiler/grammar.capnp.c++",
        "c++/src/capnp/compiler/lexer.c++",
        "c++/src/capnp/compiler/lexer.capnp.c++",
        "c++/src/capnp/compiler/node-translator.c++",
        "c++/src/capnp/compiler/parser.c++",
        "c++/src/capnp/compiler/type-id.c++",
        "c++/src/capnp/schema-parser.c++",
        "c++/src/capnp/serialize-text.c++",
    ],
    hdrs = [
        "c++/src/capnp/compiler/compiler.h",
        "c++/src/capnp/compiler/error-reporter.h",
        "c++/src/capnp/compiler/generics.h",
        "c++/src/capnp/compiler/grammar.capnp.h",
        "c++/src/capnp/compiler/lexer.capnp.h",
        "c++/src/capnp/compiler/lexer.h",
        "c++/src/capnp/compiler/node-translator.h",
        "c++/src/capnp/compiler/parser.h",
        "c++/src/capnp/compiler/resolver.h",
        "c++/src/capnp/compiler/type-id.h",
        "c++/src/capnp/schema-parser.h",
        "c++/src/capnp/serialize-text.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":capnp",
        ":kj",
    ],
)

capnroto_cc_test(
    name = "capnpc_tests",
    srcs = [
        "c++/src/capnp/compiler/lexer-test.c++",
        "c++/src/capnp/compiler/type-id-test.c++",
        "c++/src/capnp/schema-parser-test.c++",
        "c++/src/capnp/serialize-text-test.c++",
    ],
    deps = [
        ":capnpc",
        ":capnp_test_util",
        ":kj",
        ":kj_test",
    ],
)

capnroto_cc_test(
    name = "capnpc_evolution_tests",
    srcs = ["c++/src/capnp/compiler/evolution-test.c++"],
    deps = [
        ":capnp_test_util",
        ":capnpc",
        ":kj",
        ":kj_test",
    ],
)

capnroto_cc_binary(
    name = "capnp_tool",
    srcs = [
        "c++/src/capnp/compiler/capnp.c++",
        "c++/src/capnp/compiler/module-loader.c++",
        "c++/src/capnp/compiler/module-loader.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":capnp",
        ":capnp_json",
        ":capnpc",
        ":kj",
    ],
)

capnroto_cc_binary(
    name = "capnpc_cpp",
    srcs = ["c++/src/capnp/compiler/capnpc-c++.c++"],
    visibility = ["//visibility:public"],
    deps = [
        ":capnp",
        ":capnp_json",
        ":capnpc",
        ":kj",
    ],
)

capnroto_cc_binary(
    name = "capnpc_capnp",
    srcs = ["c++/src/capnp/compiler/capnpc-capnp.c++"],
    visibility = ["//visibility:public"],
    deps = [
        ":capnp",
        ":kj",
    ],
)

# --------------------------------------------------------------------------------------------------
# KJ
# --------------------------------------------------------------------------------------------------

KJ_LITE_SRCS = [
    "c++/src/kj/arena.c++",
    "c++/src/kj/array.c++",
    "c++/src/kj/common.c++",
    "c++/src/kj/debug.c++",
    "c++/src/kj/encoding.c++",
    "c++/src/kj/exception.c++",
    "c++/src/kj/hash.c++",
    "c++/src/kj/io.c++",
    "c++/src/kj/list.c++",
    "c++/src/kj/main.c++",
    "c++/src/kj/memory.c++",
    "c++/src/kj/mutex.c++",
    "c++/src/kj/source-location.c++",
    "c++/src/kj/string.c++",
    "c++/src/kj/table.c++",
    "c++/src/kj/thread.c++",
    "c++/src/kj/time.c++",
    "c++/src/kj/units.c++",
]

KJ_HEAVY_SRCS = [
    "c++/src/kj/filesystem-disk-unix.c++",
    "c++/src/kj/filesystem-disk-win32.c++",
    "c++/src/kj/filesystem.c++",
    "c++/src/kj/parse/char.c++",
    "c++/src/kj/refcount.c++",
    "c++/src/kj/string-tree.c++",
]

KJ_LITE_HDRS = [
    "c++/src/kj/arena.h",
    "c++/src/kj/array.h",
    "c++/src/kj/common.h",
    "c++/src/kj/debug.h",
    "c++/src/kj/encoding.h",
    "c++/src/kj/exception.h",
    "c++/src/kj/function.h",
    "c++/src/kj/hash.h",
    "c++/src/kj/io.h",
    "c++/src/kj/list.h",
    "c++/src/kj/main.h",
    "c++/src/kj/map.h",
    "c++/src/kj/memory.h",
    "c++/src/kj/miniposix.h",
    "c++/src/kj/mutex.h",
    "c++/src/kj/one-of.h",
    "c++/src/kj/source-location.h",
    "c++/src/kj/std/iostream.h",
    "c++/src/kj/string.h",
    "c++/src/kj/table.h",
    "c++/src/kj/thread.h",
    "c++/src/kj/threadlocal.h",
    "c++/src/kj/time.h",
    "c++/src/kj/tuple.h",
    "c++/src/kj/units.h",
    "c++/src/kj/vector.h",
    "c++/src/kj/windows-sanity.h",
]

KJ_HEAVY_HDRS = [
    "c++/src/kj/filesystem.h",
    "c++/src/kj/parse/char.h",
    "c++/src/kj/parse/common.h",
    "c++/src/kj/refcount.h",
    "c++/src/kj/string-tree.h",
]

KJ_LITE_TEST_SRCS = [
    "c++/src/kj/arena-test.c++",
    "c++/src/kj/array-test.c++",
    "c++/src/kj/common-test.c++",
    "c++/src/kj/debug-test.c++",
    "c++/src/kj/encoding-test.c++",
    "c++/src/kj/exception-test.c++",
    "c++/src/kj/function-test.c++",
    "c++/src/kj/io-test.c++",
    "c++/src/kj/list-test.c++",
    "c++/src/kj/map-test.c++",
    "c++/src/kj/memory-test.c++",
    "c++/src/kj/mutex-test.c++",
    "c++/src/kj/one-of-test.c++",
    "c++/src/kj/std/iostream-test.c++",
    "c++/src/kj/string-test.c++",
    "c++/src/kj/table-test.c++",
    "c++/src/kj/threadlocal-test.c++",
    "c++/src/kj/time-test.c++",
    "c++/src/kj/tuple-test.c++",
    "c++/src/kj/units-test.c++",
]

KJ_HEAVY_TEST_SRCS = [
    # NOTE We explicitly disable this test because it requires write access to /var/tmp.
    #"c++/src/kj/filesystem-disk-test.c++",
    "c++/src/kj/filesystem-test.c++",
    "c++/src/kj/parse/char-test.c++",
    "c++/src/kj/parse/common-test.c++",
    "c++/src/kj/refcount-test.c++",
    "c++/src/kj/string-tree-test.c++",
]

capnroto_cc_library(
    name = "kj",
    srcs = KJ_LITE_SRCS + KJ_HEAVY_SRCS,
    hdrs = KJ_LITE_HDRS + KJ_HEAVY_HDRS,
    visibility = ["//visibility:public"],
)

capnroto_cc_test(
    name = "kj_tests",
    size = "small",
    srcs = KJ_LITE_TEST_SRCS + KJ_HEAVY_TEST_SRCS,
    deps = [
        ":kj",
        ":kj_test",
    ],
)

capnroto_cc_library(
    name = "kj_lite",
    srcs = KJ_LITE_SRCS,
    hdrs = KJ_LITE_HDRS,
    defines = ["CAPNP_LITE"],
    visibility = ["//visibility:public"],
)

capnroto_cc_test(
    name = "kj_lite_tests",
    size = "small",
    srcs = KJ_LITE_TEST_SRCS,
    deps = [
        ":kj_lite",
        ":kj_test",
    ],
)

capnroto_cc_library(
    name = "kj_async",
    srcs = [
        "c++/src/kj/async.c++",
        "c++/src/kj/async-io.c++",
        "c++/src/kj/async-io-unix.c++",
        "c++/src/kj/async-io-win32.c++",
        "c++/src/kj/async-unix.c++",
        "c++/src/kj/async-win32.c++",
        "c++/src/kj/timer.c++",
    ],
    hdrs = [
        "c++/src/kj/async.h",
        "c++/src/kj/async-inl.h",
        "c++/src/kj/async-io.h",
        "c++/src/kj/async-io-internal.h",
        "c++/src/kj/async-prelude.h",
        "c++/src/kj/async-queue.h",
        "c++/src/kj/async-unix.h",
        "c++/src/kj/async-win32.h",
        "c++/src/kj/timer.h",
    ],
    visibility = ["//visibility:public"],
    deps = [":kj"],
)

# NOTE: This is a separate library just so that we can add the textual_hdrs. Some of the c++ files
# are #included in other c++ files, so this is the typical bazel work-around to support that.
capnroto_cc_library(
    name = "kj_async_tests_lib",
    srcs = [
        "c++/src/kj/async-io-test.c++",
        "c++/src/kj/async-queue-test.c++",
        "c++/src/kj/async-test.c++",
        "c++/src/kj/async-unix-test.c++",
        "c++/src/kj/async-unix-xthread-test.c++",
        "c++/src/kj/async-win32-test.c++",
        "c++/src/kj/async-win32-xthread-test.c++",
    ],
    textual_hdrs = ["c++/src/kj/async-xthread-test.c++"],
    deps = [
        ":kj",
        ":kj_async",
        ":kj_test",
    ],
)

capnroto_cc_test(
    name = "kj_async_tests",
    size = "small",
    deps = [":kj_async_tests_lib"],
)

capnroto_cc_library(
    name = "kj_http",
    srcs = [
        "c++/src/kj/compat/http.c++",
        "c++/src/kj/compat/url.c++",
    ],
    hdrs = [
        "c++/src/kj/compat/http.h",
        "c++/src/kj/compat/url.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":kj",
        ":kj_async",
    ],
)

capnroto_cc_test(
    name = "kj_http_tests",
    size = "small",
    srcs = [
        "c++/src/kj/compat/http-test.c++",
        "c++/src/kj/compat/url-test.c++",
    ],
    deps = [
        ":kj_http",
        ":kj_test",
    ],
)

# NOTE: This does not currently support openssl (-D KJ_HAS_OPENSSL).
capnroto_cc_library(
    name = "kj_tls",
    srcs = [
        "c++/src/kj/compat/readiness-io.c++",
        "c++/src/kj/compat/tls.c++",
    ],
    hdrs = [
        "c++/src/kj/compat/readiness-io.h",
        "c++/src/kj/compat/tls.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":kj",
        ":kj_async",
    ],
)

capnroto_cc_test(
    name = "kj_tls_tests",
    size = "small",
    srcs = [
        "c++/src/kj/compat/readiness-io-test.c++",
        "c++/src/kj/compat/tls-test.c++",
    ],
    deps = [
        ":kj_test",
        ":kj_tls",
    ],
)

capnroto_cc_library(
    name = "kj_gzip",
    srcs = ["c++/src/kj/compat/gzip.c++"],
    hdrs = ["c++/src/kj/compat/gzip.h"],
    defines = ["KJ_HAS_ZLIB=1"],
    visibility = ["//visibility:public"],
    deps = [
        ":kj",
        ":kj_async",
        "@zlib",
    ],
)

capnroto_cc_test(
    name = "kj_gzip_tests",
    size = "small",
    srcs = ["c++/src/kj/compat/gzip-test.c++"],
    deps = [
        ":kj_gzip",
        ":kj_test",
    ],
)

capnroto_cc_library(
    name = "kj_test",
    srcs = [
        "c++/src/kj/test.c++",
        "c++/src/kj/test-helpers.c++",
    ],
    hdrs = [
        "c++/src/kj/compat/gtest.h",
        "c++/src/kj/test.h",
    ],
    visibility = ["//visibility:public"],
    deps = [":kj"],
)

capnroto_cc_test(
    name = "kj_test_tests",
    size = "small",
    srcs = ["c++/src/kj/test-test.c++"],
    deps = [":kj_test"],
)
